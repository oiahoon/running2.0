#!/usr/bin/env node

/**
 * Migrate Strava JSON data to SQLite database
 * This script processes JSON files generated by the Python sync script
 */

const fs = require('fs');
const path = require('path');
const Database = require('better-sqlite3');

const DATA_DIR = path.join(__dirname, '../apps/web/data');
const DB_PATH = path.join(DATA_DIR, 'running_page_2.db');

// Ensure data directory exists
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
}

// Initialize database
const db = new Database(DB_PATH);

// Enable foreign keys and WAL mode
db.pragma('foreign_keys = ON');
db.pragma('journal_mode = WAL');

// Create tables if they don't exist
const createTablesSQL = `
CREATE TABLE IF NOT EXISTS activities (
  id INTEGER PRIMARY KEY,
  external_id TEXT UNIQUE NOT NULL,
  source TEXT NOT NULL DEFAULT 'strava',
  name TEXT NOT NULL,
  description TEXT,
  type TEXT NOT NULL,
  sport_type TEXT,
  start_date TEXT NOT NULL,
  start_date_local TEXT,
  timezone TEXT,
  distance REAL DEFAULT 0,
  moving_time INTEGER DEFAULT 0,
  elapsed_time INTEGER DEFAULT 0,
  total_elevation_gain REAL DEFAULT 0,
  average_speed REAL DEFAULT 0,
  max_speed REAL DEFAULT 0,
  start_latitude REAL,
  start_longitude REAL,
  end_latitude REAL,
  end_longitude REAL,
  location_city TEXT,
  location_state TEXT,
  location_country TEXT,
  summary_polyline TEXT,
  map_id TEXT,
  average_heartrate REAL,
  max_heartrate REAL,
  calories INTEGER,
  average_cadence REAL,
  average_power REAL,
  weighted_average_power REAL,
  created_at TEXT DEFAULT CURRENT_TIMESTAMP,
  updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
  synced_at TEXT DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_activities_start_date ON activities(start_date);
CREATE INDEX IF NOT EXISTS idx_activities_type ON activities(type);
CREATE INDEX IF NOT EXISTS idx_activities_external_id ON activities(external_id);
`;

db.exec(createTablesSQL);

function convertStravaActivity(activity) {
  return {
    external_id: activity.id.toString(),
    source: 'strava',
    name: activity.name || 'Untitled Activity',
    description: activity.description || null,
    type: activity.type || 'Unknown',
    sport_type: activity.sport_type || activity.type || 'Unknown',
    start_date: activity.start_date,
    start_date_local: activity.start_date_local,
    timezone: activity.timezone || null,
    distance: activity.distance || 0,
    moving_time: activity.moving_time || 0,
    elapsed_time: activity.elapsed_time || 0,
    total_elevation_gain: activity.total_elevation_gain || 0,
    average_speed: activity.average_speed || 0,
    max_speed: activity.max_speed || 0,
    start_latitude: activity.start_latlng ? activity.start_latlng[0] : null,
    start_longitude: activity.start_latlng ? activity.start_latlng[1] : null,
    end_latitude: activity.end_latlng ? activity.end_latlng[0] : null,
    end_longitude: activity.end_latlng ? activity.end_latlng[1] : null,
    location_city: activity.location_city || null,
    location_state: activity.location_state || null,
    location_country: activity.location_country || null,
    summary_polyline: activity.map?.summary_polyline || null,
    map_id: activity.map?.id || null,
    average_heartrate: activity.average_heartrate || null,
    max_heartrate: activity.max_heartrate || null,
    calories: activity.calories || null,
    average_cadence: activity.average_cadence || null,
    average_power: activity.average_watts || null,
    weighted_average_power: activity.weighted_average_watts || null,
    synced_at: new Date().toISOString()
  };
}

function migrateStravaData() {
  const activitiesFile = path.join(DATA_DIR, 'strava_activities.json');
  const detailedFile = path.join(DATA_DIR, 'strava_detailed.json');
  
  let activities = [];
  
  // Load basic activities
  if (fs.existsSync(activitiesFile)) {
    try {
      const data = JSON.parse(fs.readFileSync(activitiesFile, 'utf8'));
      activities = activities.concat(data);
      console.log(`📄 Loaded ${data.length} basic activities`);
    } catch (error) {
      console.error('❌ Error loading basic activities:', error.message);
    }
  }
  
  // Load detailed activities (will override basic ones)
  if (fs.existsSync(detailedFile)) {
    try {
      const data = JSON.parse(fs.readFileSync(detailedFile, 'utf8'));
      
      // Create a map of detailed activities
      const detailedMap = new Map();
      data.forEach(activity => {
        detailedMap.set(activity.id.toString(), activity);
      });
      
      // Replace basic activities with detailed ones
      activities = activities.map(activity => {
        const detailed = detailedMap.get(activity.id.toString());
        return detailed || activity;
      });
      
      console.log(`📋 Enhanced with ${data.length} detailed activities`);
    } catch (error) {
      console.error('❌ Error loading detailed activities:', error.message);
    }
  }
  
  if (activities.length === 0) {
    console.log('⚠️  No Strava data found to migrate');
    return;
  }
  
  // Prepare insert statement
  const insertSQL = `
    INSERT OR REPLACE INTO activities (
      external_id, source, name, description, type, sport_type,
      start_date, start_date_local, timezone,
      distance, moving_time, elapsed_time, total_elevation_gain,
      average_speed, max_speed,
      start_latitude, start_longitude, end_latitude, end_longitude,
      location_city, location_state, location_country,
      summary_polyline, map_id,
      average_heartrate, max_heartrate, calories,
      average_cadence, average_power, weighted_average_power,
      synced_at
    ) VALUES (
      @external_id, @source, @name, @description, @type, @sport_type,
      @start_date, @start_date_local, @timezone,
      @distance, @moving_time, @elapsed_time, @total_elevation_gain,
      @average_speed, @max_speed,
      @start_latitude, @start_longitude, @end_latitude, @end_longitude,
      @location_city, @location_state, @location_country,
      @summary_polyline, @map_id,
      @average_heartrate, @max_heartrate, @calories,
      @average_cadence, @average_power, @weighted_average_power,
      @synced_at
    )
  `;
  
  const insertStmt = db.prepare(insertSQL);
  
  // Process activities in transaction
  const insertMany = db.transaction((activities) => {
    let inserted = 0;
    let updated = 0;
    
    for (const activity of activities) {
      try {
        const converted = convertStravaActivity(activity);
        const result = insertStmt.run(converted);
        
        if (result.changes > 0) {
          if (result.lastInsertRowid) {
            inserted++;
          } else {
            updated++;
          }
        }
      } catch (error) {
        console.error(`❌ Error processing activity ${activity.id}:`, error.message);
      }
    }
    
    return { inserted, updated };
  });
  
  console.log('🔄 Migrating Strava activities to database...');
  const result = insertMany(activities);
  
  console.log(`✅ Migration completed:`);
  console.log(`   - Inserted: ${result.inserted} new activities`);
  console.log(`   - Updated: ${result.updated} existing activities`);
  
  // Show final stats
  const totalCount = db.prepare('SELECT COUNT(*) as count FROM activities').get();
  console.log(`📊 Total activities in database: ${totalCount.count}`);
}

function main() {
  try {
    console.log('🚀 Starting Strava data migration...');
    migrateStravaData();
    console.log('✅ Migration completed successfully');
  } catch (error) {
    console.error('❌ Migration failed:', error);
    process.exit(1);
  } finally {
    db.close();
  }
}

if (require.main === module) {
  main();
}

module.exports = { migrateStravaData };
